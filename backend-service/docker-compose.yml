services:
  postgres:
    image: postgres:15-alpine
    container_name: btc-yield-postgres
    environment:
      POSTGRES_DB: btc_yield
      POSTGRES_USER: btc_yield_user
      POSTGRES_PASSWORD: btc_yield_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U btc_yield_user -d btc_yield"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Python API service for Bitcoin operations (Lender API)
  python-api:
    build:
      context: ../python-api
      dockerfile: Dockerfile
    container_name: btc-yield-python-api
    environment:
      PYTHON_API_HOST: 0.0.0.0
      PYTHON_API_PORT: 8001
      PYTHON_API_BITCOIN_NETWORK: regtest
      PYTHON_API_VAULTERO_PATH: /app/btc-vaultero
      PYTHON_API_LOG_LEVEL: info
      PYTHON_API_CORS_ORIGINS: '["http://localhost:3000", "http://localhost:3001"]'
      # Bitcoin Core RPC connection (matches ../btc-backend container)
      PYTHON_API_BITCOIN_RPC_HOST: host.docker.internal  # Access Bitcoin Core on host
      PYTHON_API_BITCOIN_RPC_PORT: 18443
      PYTHON_API_BITCOIN_RPC_USER: bitcoin
      PYTHON_API_BITCOIN_RPC_PASSWORD: localtest
    volumes:
      - ../btc-vaultero/src:/app/btc-vaultero/src:ro  # Mount only btc-vaultero source code at runtime
      - ../python-api/examples:/app/examples  # Mount examples directory for signature files
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Borrower API service (separate local instance on borrower's machine for borrower operations, e.g. signing with private key)
  borrower-api:
    build:
      context: ../python-api
      dockerfile: Dockerfile
    container_name: btc-yield-borrower-api
    environment:
      PYTHON_API_HOST: 0.0.0.0
      PYTHON_API_PORT: 8002
      PYTHON_API_BITCOIN_NETWORK: regtest
      PYTHON_API_VAULTERO_PATH: /app/btc-vaultero
      PYTHON_API_LOG_LEVEL: info
      PYTHON_API_CORS_ORIGINS: '["http://localhost:3000", "http://localhost:3001"]'
      # Bitcoin Core RPC connection (matches ../btc-backend container)
      PYTHON_API_BITCOIN_RPC_HOST: host.docker.internal  # Access Bitcoin Core on host
      PYTHON_API_BITCOIN_RPC_PORT: 18443
      PYTHON_API_BITCOIN_RPC_USER: bitcoin
      PYTHON_API_BITCOIN_RPC_PASSWORD: localtest
    volumes:
      - ../btc-vaultero/src:/app/btc-vaultero/src:ro  # Mount only btc-vaultero source code at runtime
      - ../python-api/examples:/app/examples  # Mount examples directory for signature files
    ports:
      - "8002:8002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Node.js Backend Service (Express/TypeScript API)
  backend-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: btc-yield-backend
    environment:
      NODE_ENV: development
      PORT: 3002
      # Database connection
      DATABASE_URL: postgresql://btc_yield_user:btc_yield_password@postgres:5432/btc_yield
      # Python API connection
      PYTHON_API_URL: http://python-api:8001
      # CORS origins
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:3002"]'
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      python-api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: unless-stopped

  # Optional: pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4
    container_name: btc-yield-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@btcyield.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    profiles:
      - dev # Only start with --profile dev

volumes:
  postgres_data:

networks:
  default:
    name: btc-yield-network
